# coding: utf-8

"""
    Peptide Match OpenAPI 2.0

    This is PeptideMatch OpenAPI.

    OpenAPI spec version: 2.0.0
    Contact: chenc@udel.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Protein(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'review_status': 'str',
        'ac': 'str',
        'id': 'str',
        'name': 'str',
        'org_name': 'str',
        'org_taxon_id': 'int',
        'org_taxon_group_name': 'str',
        'org_taxon_group_id': 'int',
        'sequence': 'str',
        'matching_peptide': 'list[ProteinMatchingPeptide]'
    }

    attribute_map = {
        'review_status': 'reviewStatus',
        'ac': 'ac',
        'id': 'id',
        'name': 'name',
        'org_name': 'orgName',
        'org_taxon_id': 'orgTaxonId',
        'org_taxon_group_name': 'orgTaxonGroupName',
        'org_taxon_group_id': 'orgTaxonGroupId',
        'sequence': 'sequence',
        'matching_peptide': 'matchingPeptide'
    }

    def __init__(self, review_status=None, ac=None, id=None, name=None, org_name=None, org_taxon_id=None, org_taxon_group_name=None, org_taxon_group_id=None, sequence=None, matching_peptide=None):
        """
        Protein - a model defined in Swagger
        """

        self._review_status = None
        self._ac = None
        self._id = None
        self._name = None
        self._org_name = None
        self._org_taxon_id = None
        self._org_taxon_group_name = None
        self._org_taxon_group_id = None
        self._sequence = None
        self._matching_peptide = None

        if review_status is not None:
          self.review_status = review_status
        if ac is not None:
          self.ac = ac
        if id is not None:
          self.id = id
        if name is not None:
          self.name = name
        if org_name is not None:
          self.org_name = org_name
        if org_taxon_id is not None:
          self.org_taxon_id = org_taxon_id
        if org_taxon_group_name is not None:
          self.org_taxon_group_name = org_taxon_group_name
        if org_taxon_group_id is not None:
          self.org_taxon_group_id = org_taxon_group_id
        if sequence is not None:
          self.sequence = sequence
        if matching_peptide is not None:
          self.matching_peptide = matching_peptide

    @property
    def review_status(self):
        """
        Gets the review_status of this Protein.
        SwissProt or TrEMBL entry.

        :return: The review_status of this Protein.
        :rtype: str
        """
        return self._review_status

    @review_status.setter
    def review_status(self, review_status):
        """
        Sets the review_status of this Protein.
        SwissProt or TrEMBL entry.

        :param review_status: The review_status of this Protein.
        :type: str
        """

        self._review_status = review_status

    @property
    def ac(self):
        """
        Gets the ac of this Protein.
        Protein accession number.

        :return: The ac of this Protein.
        :rtype: str
        """
        return self._ac

    @ac.setter
    def ac(self, ac):
        """
        Sets the ac of this Protein.
        Protein accession number.

        :param ac: The ac of this Protein.
        :type: str
        """

        self._ac = ac

    @property
    def id(self):
        """
        Gets the id of this Protein.
        Protein ID.

        :return: The id of this Protein.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Protein.
        Protein ID.

        :param id: The id of this Protein.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Protein.
        Protein name.

        :return: The name of this Protein.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Protein.
        Protein name.

        :param name: The name of this Protein.
        :type: str
        """

        self._name = name

    @property
    def org_name(self):
        """
        Gets the org_name of this Protein.
        Organism name.

        :return: The org_name of this Protein.
        :rtype: str
        """
        return self._org_name

    @org_name.setter
    def org_name(self, org_name):
        """
        Sets the org_name of this Protein.
        Organism name.

        :param org_name: The org_name of this Protein.
        :type: str
        """

        self._org_name = org_name

    @property
    def org_taxon_id(self):
        """
        Gets the org_taxon_id of this Protein.
        Organism taxonomy ID.

        :return: The org_taxon_id of this Protein.
        :rtype: int
        """
        return self._org_taxon_id

    @org_taxon_id.setter
    def org_taxon_id(self, org_taxon_id):
        """
        Sets the org_taxon_id of this Protein.
        Organism taxonomy ID.

        :param org_taxon_id: The org_taxon_id of this Protein.
        :type: int
        """

        self._org_taxon_id = org_taxon_id

    @property
    def org_taxon_group_name(self):
        """
        Gets the org_taxon_group_name of this Protein.
        Organism taxonomy group name.

        :return: The org_taxon_group_name of this Protein.
        :rtype: str
        """
        return self._org_taxon_group_name

    @org_taxon_group_name.setter
    def org_taxon_group_name(self, org_taxon_group_name):
        """
        Sets the org_taxon_group_name of this Protein.
        Organism taxonomy group name.

        :param org_taxon_group_name: The org_taxon_group_name of this Protein.
        :type: str
        """

        self._org_taxon_group_name = org_taxon_group_name

    @property
    def org_taxon_group_id(self):
        """
        Gets the org_taxon_group_id of this Protein.
        Organism taxonomy group ID.

        :return: The org_taxon_group_id of this Protein.
        :rtype: int
        """
        return self._org_taxon_group_id

    @org_taxon_group_id.setter
    def org_taxon_group_id(self, org_taxon_group_id):
        """
        Sets the org_taxon_group_id of this Protein.
        Organism taxonomy group ID.

        :param org_taxon_group_id: The org_taxon_group_id of this Protein.
        :type: int
        """

        self._org_taxon_group_id = org_taxon_group_id

    @property
    def sequence(self):
        """
        Gets the sequence of this Protein.
        Protein sequence.

        :return: The sequence of this Protein.
        :rtype: str
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """
        Sets the sequence of this Protein.
        Protein sequence.

        :param sequence: The sequence of this Protein.
        :type: str
        """

        self._sequence = sequence

    @property
    def matching_peptide(self):
        """
        Gets the matching_peptide of this Protein.

        :return: The matching_peptide of this Protein.
        :rtype: list[ProteinMatchingPeptide]
        """
        return self._matching_peptide

    @matching_peptide.setter
    def matching_peptide(self, matching_peptide):
        """
        Sets the matching_peptide of this Protein.

        :param matching_peptide: The matching_peptide of this Protein.
        :type: list[ProteinMatchingPeptide]
        """

        self._matching_peptide = matching_peptide

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Protein):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
